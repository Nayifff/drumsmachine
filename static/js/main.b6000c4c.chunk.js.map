{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","keyCode","letter","id","src","DrumPad","handleKeydown","e","_this","props","charCodeAt","audio","play","currentTime","handleDisplay","handleClick","document","addEventListener","this","window","focus","removeEventListener","_this2","react_default","a","createElement","className","onClick","ref","React","Component","App","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","display","setState","state","Volume","sliderVal","adjustVolume","bind","assertThisInitialized","target","value","Math","round","_this4","slice","getElementsByClassName","forEach","sound","volume","map","d","App_DrumPad","key","type","min","max","step","onChange","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6000c4c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nconst data = [{\n    keyCode: 81,\n    letter: 'Q',\n    id: 'Heater-1',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    letter: 'W',\n    id: 'Heater-2',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    letter: 'E',\n    id: 'Heater-3',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    letter: 'A',\n    id: 'Heater-4',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    letter: 'S',\n    id: 'Clap',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    letter: 'D',\n    id: 'Open-HH',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    letter: 'Z',\n    id: \"Kick-n'-Hat\",\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    letter: 'X',\n    id: 'Kick',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    letter: 'C',\n    id: 'Closed-HH',\n    src: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  }\n];\n\nclass DrumPad extends React.Component {\n \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeydown)\n    window.focus()\n  }\n  \n componentWillUnmount() {\n   document.removeEventListener('keydown', this.handleKeydown)\n }\n  \n  handleKeydown = e => {\n    if(e.keyCode === this.props.letter.charCodeAt()) {\n      this.audio.play()\n      this.audio.currentTime = 0\n      this.props.handleDisplay(this.props.id)\n    }\n  }\n \n  handleClick = () => {\n    this.audio.play()\n    this.audio.currentTime = 0\n    this.props.handleDisplay(this.props.id)\n  }\n  \n  render() {\n    return (\n      <div \n          className='drum-pad' \n          id={this.props.id}\n          onClick={this.handleClick}\n      >\n        <h1>{this.props.letter}</h1>\n        <audio id={this.props.letter}\n               className='clip'\n               src={this.props.src}\n               ref={ref => this.audio = ref}\n          ></audio>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      display: 'Click On A Key!',\n      Volume: 3,\n     sliderVal: 0.3\n    }\n          this.adjustVolume = this.adjustVolume.bind(this);\n\n  }\n    \n      adjustVolume(e) {\nthis.setState({\n        sliderVal: e.target.value,\n        display: \"Volume: \" + Math.round(e.target.value * 100)\n      });\n      }\n  \n  \n  handleDisplay = display => this.setState({ display })\n  \n  render() { \n     const clips = [].slice.call(document.getElementsByClassName('clip'));\n      clips.forEach(sound => {\n        sound.volume = this.state.sliderVal\n      });\n    return(\n    <div id='App drum-machine'>\n        <div id='display'>{this.state.display}</div>\n        <div id='drum-pads'>{data.map(d => (\n          <DrumPad\n            key={d.id}\n            id={d.id}\n            letter={d.letter}\n            src={d.src}\n            handleDisplay={this.handleDisplay}\n          />   \n         ))}</div>\n            <div className=\"volume-slider\">\n\t\t\t\t\t\t<input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={this.state.sliderVal} onChange={this.adjustVolume} />\n\t\t\t\t\t</div>\n    </div>\n    )\n  }\n}\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}